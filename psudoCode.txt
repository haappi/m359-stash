Fibonacci sequence-
Make an array or a string with a seperator of some sort
add 2 elements by default; 0, 1
loop through the array and add the last 2 elements together
add the new element to the array
repeat until user input + 2 (because of the 2 elements added by default)

x number oif multiples of y
just a basic for loop, starting at 0, going up to x + 1, and adding y to the counter each time
> or i can just multiply by the counter

print substrings of a number
convert the number to a string
- use a double for loop to loop through the string
- the outer loop will be the starting index
- the inner loop will be the ending index
it would increment by 1 each time, thus leading to each substring being printed
THIS WON'T PRINT ALL PERMUTATIONS OF THE STRING.

prime factoraization
integer division the number by all single digit prime numbers until all things are single digits prime numbers

Strong numbers:
convert the number to a string
loop through the string
raise each digit to the length of the string (Math.pow)
add the result to a counter
if the counter is equal to the number, then it is a strong number

Armstrong / Narcissistic numbers:
convert the number to a string
loop through the string
cube each digit
see if they all add up to the number
if it does, then it is an armstrong number

Heron's method for calculating a square root
a lot of looping
- take the output & use it in the next calculation
- efficitvely using a lot of recursive calls.
loop like, 10 ish times?

calucuatying if a number is prime-+
ignore all numbers less than or equal to 1
- just return false for them
loop through all numbers from 2 to the number divided by 2
- we only need to check half because after the halfway point, wer're justy doing useless work
- if the number is divisible by any of the numbers, then it is not prime
- if it is not divisible by any of the numbers, then it is prime
a lot of looping!

getting x prime numbers
use the above functiopn to calucate if the given number is prime or not
- if it is, add it to an array (maybe)
loop through x times and return the array as a string
returns a len of x prime numbers

expanding a number
convert the number to a string
loop through the string
- for each digit, add a 0 to the end of the string times the length of the string - 1 - the index of the digit

calculating pi:
use a formula (like Leibniz's formula)
- loop through a bunch of times
- like a lot lot, it needs to be accurate (so around 1k times)
- add the result to a counter & multiply by 4 (because thats what the formula does)

getting a factorial of a number
make a loop that goes from 1 to the number
- multiply the counter by the result of the previous loop
- subtract the number by 1 each time
return

reduce a fraction
get the GCF (but denominator for this case) of the numerator & denominator
divide the numerator & denominator by the GCF
return the result

factor pairs for a number
loop through all numbers from 1 to the number
if the number is cleanly divisible by the number, then it is a factor pair (modulous 0)
append it to a string
return

rolling a dice
see how many; sides they want, times, and # of dice
loop through the number of times
- loop through the number of dice
- add a random number between 1 and the number of sides to a counter
do the average and min yada yada
return
